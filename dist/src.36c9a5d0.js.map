{"version":3,"sources":["libs/math/index.ts","components/coordinates/index.ts","components/snake/index.ts","components/apples/Apple.ts","components/apples/RedApple.ts","components/apples/OrangeApple.ts","components/apples/index.ts","components/game/index.ts","index.ts"],"names":[],"mappings":"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","file":"src.36c9a5d0.js","sourceRoot":"../src","sourcesContent":["// Get random number with min and max, or if only one parameter get random number in the range [0; x - 1]\nexport const getRandNum = (min: number, max?: number): number => {\n  if (max === undefined) return getRandNum(0, min - 1);\n  else return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// Get random boolean value with success rate\nexport const getRandBool = (rate: number = 0.5): boolean => Math.random() < rate;\n\n// Round to demanded amount of decimals only if needed\nexport const roundTo = (number: number, decimals: number = 0): number =>\n  Math.round(number * 10 ** decimals) / 10 ** decimals;\n\n// Floor to demanded amount of decimals only if needed\nexport const floorTo = (number: number, decimals: number = 0): number =>\n  Math.floor(number * 10 ** decimals) / 10 ** decimals;\n\n// Ceil to demanded amount of decimals only if needed\nexport const ceilTo = (number: number, decimals: number = 0): number =>\n  Math.ceil(number * 10 ** decimals) / 10 ** decimals;\n\n// Get amount of decimals in a number\nexport const countDecimals = (number: number): number =>\n  Math.floor(number) !== number ? number.toString().split('.')[1].length : 0;\n\n// Get average number between all pagetrameters\nexport const avg = (...numbers: number[]): number =>\n  numbers.reduce((acc, item) => acc + item) / numbers.length;\n\n// Find Gratest Common Divisor of two numbers\nexport const gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\n","import { Coordinates, direction } from '../../interfaces';\n\nexport const moveCoordinates = (\n  coordinates: Coordinates,\n  direction: direction\n): Coordinates => {\n  let { x, y } = coordinates;\n  switch (direction) {\n    case 'left':\n      x--;\n      break;\n    case 'right':\n      x++;\n      break;\n    case 'up':\n      y--;\n      break;\n    case 'down':\n      y++;\n      break;\n  }\n  return { x, y };\n};\n\nexport const getOpposite = (direction: direction): direction => {\n  const opposite: { [key: string]: direction } = {\n    left: 'right',\n    right: 'left',\n    up: 'down',\n    down: 'up',\n  };\n  return opposite[direction];\n};\n","import { Coordinates, direction } from '../../interfaces';\nimport { moveCoordinates } from '../coordinates';\n\nexport class Snake {\n  length: number;\n  body: Coordinates[];\n\n  constructor(x: number, y: number, length: number) {\n    this.length = length;\n    this.body = [{ x, y }];\n  }\n\n  move(direction: direction) {\n    const coordinates = moveCoordinates(this.body[0], direction);\n    this.body.unshift(coordinates);\n    this.body = this.body.slice(0, this.length);\n  }\n\n  grow(amount = 1) {\n    this.length += amount;\n  }\n}\n","import { Coordinates } from '../../interfaces';\n\nexport class Apple {\n  coordinates: Coordinates;\n  score: number;\n  color: string;\n\n  constructor(x: number, y: number, score: number, color: string) {\n    this.coordinates = { x, y };\n    this.score = score;\n    this.color = color;\n  }\n}\n","import { Apple } from './Apple';\n\nexport class RedApple extends Apple {\n  constructor(x: number, y: number) {\n    super(x, y, 1, '#f22');\n  }\n}\n","import { Apple } from './Apple';\n\nexport class OrangeApple extends Apple {\n  constructor(x: number, y: number) {\n    super(x, y, 2, '#fc6');\n  }\n}\n","import { Apple } from './Apple';\nimport { RedApple } from './RedApple';\nimport { OrangeApple } from './OrangeApple';\n\nexport { Apple, RedApple, OrangeApple };\n","import { getRandBool, getRandNum } from '../../libs/math';\nimport { direction } from '../../interfaces';\nimport { Snake } from '../snake';\nimport { Apple, RedApple, OrangeApple } from '../apples';\nimport { moveCoordinates, getOpposite } from '../coordinates';\n\nexport class Game {\n  _play: boolean;\n  fieldSize: number;\n  root: HTMLElement;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  snake: Snake;\n  lastDirection: direction;\n  directions: direction[] = [];\n  apples: Apple[] = [];\n\n  cellSize = 30;\n  fieldBackground = '#000';\n  startLength = 3;\n  speed = 150;\n  orangeAppleSpawnRate = 0.02;\n  orangeAppleDuration = 10000;\n\n  constructor(selector: string, fieldSize: number) {\n    this.fieldSize = fieldSize;\n    this.root = document.querySelector(selector);\n    this.root.innerHTML = '';\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.canvas.height = this.fieldSize * this.cellSize;\n    this.ctx = this.canvas.getContext('2d');\n\n    this.root.append(this.canvas);\n\n    const midPoint = Math.floor(this.fieldSize / 2);\n    this.snake = new Snake(midPoint, midPoint, this.startLength);\n    this.loop = this.loop.bind(this);\n\n    window.addEventListener('keyup', (e) => {\n      if (this.lastDirection && !this._play) return;\n      let direction: direction;\n      switch (e.key) {\n        case 'ArrowLeft':\n          direction = 'left';\n          break;\n        case 'ArrowRight':\n          direction = 'right';\n          break;\n        case 'ArrowUp':\n          direction = 'up';\n          break;\n        case 'ArrowDown':\n          direction = 'down';\n          break;\n      }\n      if (direction && direction !== this.directions[0]) {\n        this.directions.unshift(direction);\n        this.directions = this.directions.slice(0, 5);\n        if (!this.lastDirection) this.play();\n      }\n    });\n\n    this.render();\n  }\n\n  play() {\n    this._play = true;\n    this.loop();\n    console.log('Game started');\n  }\n\n  pause() {\n    this._play = false;\n    console.log('Game paused');\n  }\n\n  getRandCoords() {\n    const skipCells = this.snake.body.map(({ x, y }) => y * this.fieldSize + x);\n    const emptyCells = [];\n    for (let i = 0; i < this.fieldSize ** 2; i++) {\n      if (skipCells.find((index) => index === i)) continue;\n      const y = Math.floor(i / this.fieldSize);\n      const x = i - y * this.fieldSize;\n      emptyCells.push({ x, y });\n    }\n    return emptyCells[getRandNum(emptyCells.length)];\n  }\n\n  clearField() {\n    const { width, height } = this.canvas;\n    this.ctx.clearRect(0, 0, width, height);\n  }\n\n  renderField() {\n    const { fieldSize, ctx, cellSize } = this;\n    ctx.fillStyle = '#000';\n    for (let x = 0; x < fieldSize; x++) {\n      for (let y = 0; y < fieldSize; y++) {\n        ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n      }\n    }\n  }\n\n  renderSnake() {\n    const { ctx, cellSize } = this;\n    const { body } = this.snake;\n    ctx.fillStyle = '#2f4';\n    body.forEach((coords) => {\n      const { x, y } = coords;\n      ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n    });\n  }\n\n  moveSnake() {\n    const { directions, lastDirection } = this;\n    const direction = directions.find((direction) => direction !== getOpposite(lastDirection));\n    this.snake.move(direction);\n    this.lastDirection = direction;\n  }\n\n  renderApples() {\n    const { ctx, cellSize, apples } = this;\n    apples.forEach((apple) => {\n      const { x, y } = apple.coordinates;\n      ctx.fillStyle = apple.color;\n      ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n    });\n  }\n\n  spawnRedApple() {\n    const { x, y } = this.getRandCoords();\n    const apple = new RedApple(x, y);\n    this.apples.push(apple);\n  }\n\n  needRedApple(): boolean {\n    return !this.apples.find((apple) => apple instanceof RedApple);\n  }\n\n  spawnOrangeApple() {\n    const { x, y } = this.getRandCoords();\n    const apple = new OrangeApple(x, y);\n    this.apples.push(apple);\n    setTimeout(() => {\n      const index = this.apples.indexOf(apple);\n      if (index !== -1) this.apples.splice(index, 1);\n    }, this.orangeAppleDuration);\n  }\n\n  needOrangeApple(): boolean {\n    return (\n      !this.apples.find((apple) => apple instanceof OrangeApple) &&\n      getRandBool(this.orangeAppleSpawnRate)\n    );\n  }\n\n  checkRules(): boolean {\n    const { fieldSize, lastDirection, directions } = this;\n    const direction = directions.find((direction) => direction !== getOpposite(lastDirection));\n    const { body } = this.snake;\n    const { x, y } = moveCoordinates(body[0], direction);\n    return !(\n      x < 0 ||\n      x > fieldSize - 1 ||\n      y < 0 ||\n      y > fieldSize - 1 ||\n      body.some((coords) => coords.x === x && coords.y === y)\n    );\n  }\n\n  checkAppleCollisions() {\n    const { x, y } = this.snake.body[0];\n    this.apples.forEach((apple) => {\n      const { coordinates, score } = apple;\n      if (coordinates.x === x && coordinates.y === y) {\n        this.snake.grow(score);\n        this.apples.splice(this.apples.indexOf(apple), 1);\n      }\n    });\n  }\n\n  render() {\n    this.renderField();\n    this.renderSnake();\n    this.renderApples();\n  }\n\n  loop() {\n    if (!this.checkRules()) return this.pause();\n    if (this.needRedApple()) this.spawnRedApple();\n    if (this.needOrangeApple()) this.spawnOrangeApple();\n    this.clearField();\n    this.moveSnake();\n    this.checkAppleCollisions();\n    this.render();\n    if (this._play) setTimeout(() => requestAnimationFrame(this.loop), this.speed);\n  }\n}\n","import { Game } from './components/game';\n\nconst game = new Game('#root', 21);\n"]}